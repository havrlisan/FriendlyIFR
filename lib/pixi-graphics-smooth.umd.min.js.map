{"version":3,"file":"pixi-graphics-smooth.umd.min.js","sources":["../src/core/SegmentPacker.ts","../src/shapes/RoundedRectangleBuilder.ts","../src/shapes/PolyBuilder.ts"],"sourcesContent":["import { BuildData } from './BuildData';\nimport { JOINT_TYPE } from './const';\n\nexport class SegmentPacker\n{\n    static vertsByJoint: Array<number> = [];\n\n    strideFloats = 12;\n\n    updateBufferSize(jointStart: number, jointLen: number, triangles: number, target: BuildData): void\n    {\n        const { joints } = target;\n        let foundTriangle = false;\n\n        let vertexSize = 0;\n        let indexSize = 0;\n\n        for (let i = jointStart; i < jointStart + jointLen; i++)\n        {\n            const prevCap = joints[i] & ~31;\n            const joint = joints[i] & 31;\n\n            if (joint === JOINT_TYPE.FILL)\n            {\n                foundTriangle = true;\n                vertexSize++;\n                continue;\n            }\n\n            if (joint >= JOINT_TYPE.FILL_EXPAND)\n            {\n                vertexSize += 3;\n                indexSize += 3;\n                continue;\n            }\n\n            const vs = SegmentPacker.vertsByJoint[joint] + SegmentPacker.vertsByJoint[prevCap];\n\n            if (vs >= 4)\n            {\n                vertexSize += vs;\n                indexSize += 6 + (3 * Math.max(vs - 6, 0));\n            }\n        }\n        if (foundTriangle)\n        {\n            indexSize += triangles;\n        }\n\n        target.vertexSize += vertexSize;\n        target.indexSize += indexSize;\n    }\n\n    bufferPos = 0;\n    indexPos = 0;\n    bufFloat: Float32Array;\n    bufUint: Uint32Array;\n    indices: Uint16Array;\n    buildData: BuildData;\n\n    beginPack(buildData: BuildData, bufFloat: Float32Array, bufUint: Uint32Array,\n        indices: Uint16Array, bufferPos = 0, indexPos = 0): void\n    {\n        this.buildData = buildData;\n        this.bufFloat = bufFloat;\n        this.bufUint = bufUint;\n        this.indices = indices;\n        this.bufferPos = bufferPos;\n        this.indexPos = indexPos;\n    }\n\n    endPack(): void\n    {\n        this.buildData = null;\n        this.bufFloat = null;\n        this.bufUint = null;\n        this.indices = null;\n    }\n\n    packInterleavedGeometry(jointStart: number, jointLen: number, triangles: number[],\n        lineStyle: number, color: number): void\n    {\n        const { bufFloat, bufUint, indices, buildData, strideFloats } = this;\n        const { joints, verts } = buildData;\n\n        let bufPos = this.bufferPos;\n        let indPos = this.indexPos;\n        let index = this.bufferPos / this.strideFloats;\n\n        // eslint-disable-next-line max-len\n        let x1: number; let y1: number;\n        let x2: number; let y2: number;\n        let prevX: number; let prevY: number;\n        let nextX: number; let nextY: number;\n        // let type: number;\n        let hasTriangle = false;\n\n        let travel = 0;\n\n        for (let j = jointStart; j < jointStart + jointLen; j++)\n        {\n            const fullJoint = joints[j];\n            const prevCap = joints[j] & ~31;\n            const joint = joints[j] & 31;\n\n            if (joint === JOINT_TYPE.FILL)\n            {\n                // just one vertex\n                hasTriangle = true;\n                x1 = verts[(j * 2)];\n                y1 = verts[(j * 2) + 1];\n                bufFloat[bufPos] = x1;\n                bufFloat[bufPos + 1] = y1;\n                bufFloat[bufPos + 2] = x1;\n                bufFloat[bufPos + 3] = y1;\n                bufFloat[bufPos + 4] = x1;\n                bufFloat[bufPos + 5] = y1;\n                bufFloat[bufPos + 6] = x1;\n                bufFloat[bufPos + 7] = y1;\n                bufFloat[bufPos + 8] = travel;\n                bufFloat[bufPos + 9] = 16 * joint;\n                bufFloat[bufPos + 10] = lineStyle;\n                bufUint[bufPos + 11] = color;\n                bufPos += strideFloats;\n                continue;\n            }\n\n            if (joint >= JOINT_TYPE.FILL_EXPAND)\n            {\n                prevX = verts[j * 2];\n                prevY = verts[(j * 2) + 1];\n                x1 = verts[(j * 2) + 2];\n                y1 = verts[(j * 2) + 3];\n                x2 = verts[(j * 2) + 4];\n                y2 = verts[(j * 2) + 5];\n\n                const bis = j + 3;\n\n                for (let i = 0; i < 3; i++)\n                {\n                    bufFloat[bufPos] = prevX;\n                    bufFloat[bufPos + 1] = prevY;\n                    bufFloat[bufPos + 2] = x1;\n                    bufFloat[bufPos + 3] = y1;\n                    bufFloat[bufPos + 4] = x2;\n                    bufFloat[bufPos + 5] = y2;\n                    bufFloat[bufPos + 6] = verts[(bis + i) * 2];\n                    bufFloat[bufPos + 7] = verts[((bis + i) * 2) + 1];\n\n                    bufFloat[bufPos + 8] = travel;\n                    bufFloat[bufPos + 9] = (16 * fullJoint) + i;\n                    bufFloat[bufPos + 10] = lineStyle;\n                    bufUint[bufPos + 11] = color;\n                    bufPos += strideFloats;\n                }\n\n                indices[indPos] = index;\n                indices[indPos + 1] = index + 1;\n                indices[indPos + 2] = index + 2;\n                indPos += 3;\n                index += 3;\n                continue;\n            }\n\n            const vs = SegmentPacker.vertsByJoint[joint] + SegmentPacker.vertsByJoint[prevCap];\n\n            if (vs === 0)\n            {\n                continue;\n            }\n            x1 = verts[j * 2];\n            y1 = verts[(j * 2) + 1];\n            x2 = verts[(j * 2) + 2];\n            y2 = verts[(j * 2) + 3];\n            // TODO: caps here\n            prevX = verts[(j * 2) - 2];\n            prevY = verts[(j * 2) - 1];\n\n            const dist = Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));\n\n            if (SegmentPacker.vertsByJoint[joint] === 0)\n            {\n                travel -= dist;\n            }\n\n            if ((joint & ~2) !== JOINT_TYPE.JOINT_CAP_BUTT)\n            {\n                nextX = verts[(j * 2) + 4];\n                nextY = verts[(j * 2) + 5];\n            }\n            else\n            {\n                nextX = x1;\n                nextY = y1;\n            }\n            // type = joint;\n\n            for (let i = 0; i < vs; i++)\n            {\n                bufFloat[bufPos] = prevX;\n                bufFloat[bufPos + 1] = prevY;\n                bufFloat[bufPos + 2] = x1;\n                bufFloat[bufPos + 3] = y1;\n                bufFloat[bufPos + 4] = x2;\n                bufFloat[bufPos + 5] = y2;\n                bufFloat[bufPos + 6] = nextX;\n                bufFloat[bufPos + 7] = nextY;\n                bufFloat[bufPos + 8] = travel;\n                bufFloat[bufPos + 9] = (16 * fullJoint) + i;\n                bufFloat[bufPos + 10] = lineStyle;\n                bufUint[bufPos + 11] = color;\n                bufPos += strideFloats;\n            }\n\n            travel += dist;\n\n            indices[indPos] = index;\n            indices[indPos + 1] = index + 1;\n            indices[indPos + 2] = index + 2;\n            indices[indPos + 3] = index;\n            indices[indPos + 4] = index + 2;\n            indices[indPos + 5] = index + 3;\n            indPos += 6;\n            for (let j = 5; j + 1 < vs; j++)\n            {\n                indices[indPos] = index + 4;\n                indices[indPos + 1] = index + j;\n                indices[indPos + 2] = index + j + 1;\n                indPos += 3;\n            }\n            index += vs;\n        }\n\n        if (hasTriangle)\n        {\n            for (let i = 0; i < triangles.length; i++)\n            {\n                indices[indPos + i] = triangles[i] + index;\n            }\n            indPos += triangles.length;\n        }\n\n        this.bufferPos = bufPos;\n        this.indexPos = indPos;\n    }\n}\n\nconst verts = SegmentPacker.vertsByJoint;\n\nfor (let i = 0; i < 256; i++)\n{ verts.push(0); }\n// simple fill\nverts[JOINT_TYPE.FILL] = 1;\n\nfor (let i = 0; i < 8; i++)\n{\n    verts[JOINT_TYPE.FILL_EXPAND + i] = 3;\n}\n\n// no caps for now\nverts[JOINT_TYPE.JOINT_BEVEL] = 4 + 3;\nverts[JOINT_TYPE.JOINT_BEVEL + 1] = 4 + 3;\nverts[JOINT_TYPE.JOINT_BEVEL + 2] = 4 + 3;\nverts[JOINT_TYPE.JOINT_BEVEL + 3] = 4 + 3;\nverts[JOINT_TYPE.JOINT_ROUND] = 4 + 5;\nverts[JOINT_TYPE.JOINT_ROUND + 1] = 4 + 5;\nverts[JOINT_TYPE.JOINT_ROUND + 2] = 4 + 5;\nverts[JOINT_TYPE.JOINT_ROUND + 3] = 4 + 5;\nverts[JOINT_TYPE.JOINT_MITER] = 4 + 4;\nverts[JOINT_TYPE.JOINT_MITER + 1] = 4 + 4;\nverts[JOINT_TYPE.JOINT_MITER + 2] = 4;\nverts[JOINT_TYPE.JOINT_MITER + 3] = 4;\nverts[JOINT_TYPE.JOINT_CAP_BUTT] = 4;\nverts[JOINT_TYPE.JOINT_CAP_BUTT + 1] = 4;\nverts[JOINT_TYPE.JOINT_CAP_SQUARE] = 4;\nverts[JOINT_TYPE.JOINT_CAP_SQUARE + 1] = 4;\nverts[JOINT_TYPE.JOINT_CAP_ROUND] = 4 + 4;\nverts[JOINT_TYPE.JOINT_CAP_ROUND + 1] = 4 + 4;\n\nverts[JOINT_TYPE.CAP_ROUND] = 4;\n","import type { IShapeBuilder } from '../core/IShapeBuilder';\nimport { SmoothGraphicsData } from '../core/SmoothGraphicsData';\nimport { BuildData } from '../core/BuildData';\nimport { RoundedRectangle } from '@pixi/math';\nimport { earcut } from '@pixi/utils';\nimport { JOINT_TYPE } from '../core/const';\n\nfunction getPt(n1: number, n2: number, perc: number): number\n{\n    const diff = n2 - n1;\n\n    return n1 + (diff * perc);\n}\n\nfunction quadraticBezierCurve(\n    fromX: number, fromY: number,\n    cpX: number, cpY: number,\n    toX: number, toY: number,\n    out: Array<number> = []): Array<number>\n{\n    const n = 20;\n    const points = out;\n\n    let xa = 0;\n    let ya = 0;\n    let xb = 0;\n    let yb = 0;\n    let x = 0;\n    let y = 0;\n\n    for (let i = 0, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        // The Green Line\n        xa = getPt(fromX, cpX, j);\n        ya = getPt(fromY, cpY, j);\n        xb = getPt(cpX, toX, j);\n        yb = getPt(cpY, toY, j);\n\n        // The Black Dot\n        x = getPt(xa, xb, j);\n        y = getPt(ya, yb, j);\n\n        points.push(x, y);\n    }\n\n    return points;\n}\n\nexport class RoundedRectangleBuilder implements IShapeBuilder\n{\n    path(graphicsData: SmoothGraphicsData, _target: BuildData)\n    {\n        const rrectData = graphicsData.shape as RoundedRectangle;\n        const { points } = graphicsData;\n        const x = rrectData.x;\n        const y = rrectData.y;\n        const width = rrectData.width;\n        const height = rrectData.height;\n\n        // Don't allow negative radius or greater than half the smallest width\n        const radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));\n\n        points.length = 0;\n\n        // No radius, do a simple rectangle\n        if (!radius)\n        {\n            points.push(x, y,\n                x + width, y,\n                x + width, y + height,\n                x, y + height);\n        }\n        else\n        {\n            quadraticBezierCurve(x, y + radius,\n                x, y,\n                x + radius, y,\n                points);\n            quadraticBezierCurve(x + width - radius,\n                y, x + width, y,\n                x + width, y + radius,\n                points);\n            quadraticBezierCurve(x + width, y + height - radius,\n                x + width, y + height,\n                x + width - radius, y + height,\n                points);\n            quadraticBezierCurve(x + radius, y + height,\n                x, y + height,\n                x, y + height - radius,\n                points);\n        }\n    }\n\n    line(graphicsData: SmoothGraphicsData, target: BuildData): void\n    {\n        const { verts, joints } = target;\n        const { points } = graphicsData;\n\n\n        const joint = points.length === 8 // we dont need joints for arcs\n            ? graphicsData.goodJointType() : JOINT_TYPE.JOINT_MITER + 3;\n        const len = points.length;\n\n        verts.push(points[len - 2], points[len - 1]);\n        joints.push(JOINT_TYPE.NONE);\n        for (let i = 0; i < len; i += 2)\n        {\n            verts.push(points[i], points[i + 1]);\n            joints.push(joint);\n        }\n        verts.push(points[0], points[1]);\n        joints.push(JOINT_TYPE.NONE);\n        verts.push(points[2], points[3]);\n        joints.push(JOINT_TYPE.NONE);\n    }\n\n    fill(graphicsData: SmoothGraphicsData, target: BuildData): void\n    {\n        const { verts, joints } = target;\n        const { points } = graphicsData;\n\n        graphicsData.triangles = earcut(points, null, 2);\n\n        for (let i = 0, j = points.length; i < j; i++)\n        {\n            verts.push(points[i], points[++i]);\n            joints.push(JOINT_TYPE.FILL);\n        }\n    }\n}\n","import type { IShapeBuilder } from '../core/IShapeBuilder';\r\nimport { SmoothGraphicsData } from '../core/SmoothGraphicsData';\r\nimport { BuildData } from '../core/BuildData';\r\nimport { JOINT_TYPE } from '../core/const';\r\nimport { Point, Polygon } from '@pixi/math';\r\nimport { earcut } from '@pixi/utils';\r\n\r\nconst tempArr: Array<number> = [];\r\n\r\nexport class PolyBuilder implements IShapeBuilder\r\n{\r\n    path(graphicsData: SmoothGraphicsData, buildData: BuildData)\r\n    {\r\n        const shape = graphicsData.shape as Polygon;\r\n        const points = graphicsData.points = shape.points.slice();\r\n        const eps = buildData.closePointEps;\r\n        const eps2 = eps * eps;\r\n\r\n        if (points.length === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const firstPoint = new Point(points[0], points[1]);\r\n        const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\r\n        const closedShape = graphicsData.closeStroke = shape.closeStroke;\r\n\r\n        let len = points.length;\r\n        let newLen = 2;\r\n\r\n        // 1. remove equal points\r\n        for (let i = 2; i < len; i += 2)\r\n        {\r\n            const x1 = points[i - 2]; const y1 = points[i - 1]; const x2 = points[i]; const\r\n                y2 = points[i + 1];\r\n            let flag = true;\r\n\r\n            if (Math.abs(x1 - x2) < eps\r\n                && Math.abs(y1 - y2) < eps)\r\n            {\r\n                flag = false;\r\n            }\r\n\r\n            if (flag)\r\n            {\r\n                points[newLen] = points[i];\r\n                points[newLen + 1] = points[i + 1];\r\n                newLen += 2;\r\n            }\r\n        }\r\n        points.length = len = newLen;\r\n\r\n        newLen = 2;\r\n        // 2. remove middle points\r\n        for (let i = 2; i + 2 < len; i += 2)\r\n        {\r\n            let x1 = points[i - 2]; let y1 = points[i - 1]; const x2 = points[i]; const y2 = points[i + 1];\r\n            let x3 = points[i + 2]; let\r\n                y3 = points[i + 3];\r\n\r\n            x1 -= x2;\r\n            y1 -= y2;\r\n            x3 -= x2;\r\n            y3 -= y2;\r\n            let flag = true;\r\n\r\n            if (Math.abs(x3 * y1 - y3 * x1) < eps2)\r\n            {\r\n                if (x1 * x3 + y1 * y3 < -eps2)\r\n                {\r\n                    flag = false;\r\n                }\r\n            }\r\n\r\n            if (flag)\r\n            {\r\n                points[newLen] = points[i];\r\n                points[newLen + 1] = points[i + 1];\r\n                newLen += 2;\r\n            }\r\n        }\r\n        points[newLen] = points[len - 2];\r\n        points[newLen + 1] = points[len - 1];\r\n        newLen += 2;\r\n\r\n        points.length = len = newLen;\r\n\r\n        if (len <= 2)\r\n        {\r\n            // suddenly, nothing\r\n            return;\r\n        }\r\n\r\n        if (closedShape)\r\n        {\r\n            // first point should be last point in closed line!\r\n            const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\r\n                && Math.abs(firstPoint.y - lastPoint.y) < eps;\r\n\r\n            if (closedPath)\r\n            {\r\n                points.pop();\r\n                points.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    line(graphicsData: SmoothGraphicsData, buildData: BuildData)\r\n    {\r\n        const { closeStroke, points } = graphicsData;\r\n        const eps = buildData.closePointEps;\r\n        // const eps2 = eps * eps;\r\n        const len = points.length;\r\n        // const style = graphicsData.lineStyle;\r\n\r\n        if (len <= 2)\r\n        {\r\n            return;\r\n        }\r\n        const { verts, joints } = buildData;\r\n\r\n        // TODO: alignment\r\n\r\n        const joint = graphicsData.jointType();\r\n        const cap = graphicsData.capType();\r\n        let prevCap = 0;\r\n\r\n        let prevX: number; let\r\n            prevY: number;\r\n\r\n        if (closeStroke)\r\n        {\r\n            prevX = points[len - 2];\r\n            prevY = points[len - 1];\r\n            joints.push(JOINT_TYPE.NONE);\r\n        }\r\n        else\r\n        {\r\n            prevX = points[2];\r\n            prevY = points[3];\r\n            if (cap === JOINT_TYPE.CAP_ROUND)\r\n            {\r\n                verts.push(points[0], points[1]);\r\n                joints.push(JOINT_TYPE.NONE);\r\n                joints.push(JOINT_TYPE.CAP_ROUND);\r\n                prevCap = 0;\r\n            }\r\n            else\r\n            {\r\n                prevCap = cap;\r\n                joints.push(JOINT_TYPE.NONE);\r\n            }\r\n        }\r\n        verts.push(prevX, prevY);\r\n\r\n        /* Line segments of interest where (x1,y1) forms the corner. */\r\n        for (let i = 0; i < len; i += 2)\r\n        {\r\n            const x1 = points[i]; const\r\n                y1 = points[i + 1];\r\n\r\n            let x2: number; let\r\n                y2: number;\r\n\r\n            if (i + 2 < len)\r\n            {\r\n                x2 = points[i + 2];\r\n                y2 = points[i + 3];\r\n            }\r\n            else\r\n            {\r\n                x2 = points[0];\r\n                y2 = points[1];\r\n            }\r\n\r\n            const dx = x2 - x1;\r\n            const dy = y2 - y1;\r\n            let nextX: number; let\r\n                nextY: number;\r\n\r\n            let endJoint = joint;\r\n\r\n            if (i + 2 >= len)\r\n            {\r\n                nextX = points[2];\r\n                nextY = points[3];\r\n                if (!closeStroke)\r\n                {\r\n                    endJoint = JOINT_TYPE.NONE;\r\n                }\r\n            }\r\n            else if (i + 4 >= len)\r\n            {\r\n                nextX = points[0];\r\n                nextY = points[1];\r\n                if (!closeStroke)\r\n                {\r\n                    if (cap === JOINT_TYPE.CAP_ROUND)\r\n                    {\r\n                        endJoint = JOINT_TYPE.JOINT_CAP_ROUND;\r\n                    }\r\n                    if (cap === JOINT_TYPE.CAP_BUTT)\r\n                    {\r\n                        endJoint = JOINT_TYPE.JOINT_CAP_BUTT;\r\n                    }\r\n                    if (cap === JOINT_TYPE.CAP_SQUARE)\r\n                    {\r\n                        endJoint = JOINT_TYPE.JOINT_CAP_SQUARE;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                nextX = points[i + 4];\r\n                nextY = points[i + 5];\r\n            }\r\n\r\n            const dx3 = x1 - prevX;\r\n            const dy3 = y1 - prevY;\r\n\r\n            if (joint >= JOINT_TYPE.JOINT_BEVEL && joint <= JOINT_TYPE.JOINT_MITER)\r\n            {\r\n                const dx2 = nextX - x2;\r\n                const dy2 = nextY - y2;\r\n\r\n                if (endJoint >= JOINT_TYPE.JOINT_BEVEL\r\n                    && endJoint <= JOINT_TYPE.JOINT_MITER + 3)\r\n                {\r\n                    const D = dx2 * dy - dy2 * dx;\r\n\r\n                    if (Math.abs(D) < eps)\r\n                    {\r\n                        switch (joint & ~3)\r\n                        {\r\n                            case JOINT_TYPE.JOINT_ROUND:\r\n                                endJoint = JOINT_TYPE.JOINT_CAP_ROUND;\r\n                                break;\r\n                            default:\r\n                                endJoint = JOINT_TYPE.JOINT_CAP_BUTT;\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (joint === JOINT_TYPE.JOINT_MITER)\r\n                {\r\n                    let jointAdd = 0;\r\n\r\n                    if (dx3 * dx + dy3 * dy > -eps)\r\n                    {\r\n                        jointAdd++;\r\n                    }\r\n                    if (endJoint === JOINT_TYPE.JOINT_MITER && dx2 * dx + dy2 * dy > -eps)\r\n                    {\r\n                        jointAdd += 2;\r\n                    }\r\n                    endJoint += jointAdd;\r\n                }\r\n            }\r\n            if (prevCap === 0)\r\n            {\r\n                if (Math.abs(dx3 * dy - dy3 * dx) < eps)\r\n                {\r\n                    prevCap = JOINT_TYPE.CAP_BUTT2;\r\n                }\r\n            }\r\n            endJoint += prevCap;\r\n            prevCap = 0;\r\n\r\n            verts.push(x1, y1);\r\n            joints.push(endJoint);\r\n\r\n            prevX = x1;\r\n            prevY = y1;\r\n        }\r\n\r\n        if (closeStroke)\r\n        {\r\n            verts.push(points[0], points[1]);\r\n            joints.push(JOINT_TYPE.NONE);\r\n            verts.push(points[2], points[3]);\r\n            joints.push(JOINT_TYPE.NONE);\r\n        }\r\n        else\r\n        {\r\n            verts.push(points[len - 4], points[len - 3]);\r\n            joints.push(JOINT_TYPE.NONE);\r\n        }\r\n    }\r\n\r\n    fill(graphicsData: SmoothGraphicsData, buildData: BuildData)\r\n    {\r\n        let points = graphicsData.points;\r\n        // TODO: simplify holes too!\r\n        const holes = graphicsData.holes;\r\n        const eps = buildData.closePointEps;\r\n\r\n        const { verts, joints } = buildData;\r\n\r\n        if (points.length < 6)\r\n        {\r\n            return;\r\n        }\r\n        const holeArray = [];\r\n        let len = points.length;\r\n        // Process holes..\r\n\r\n        for (let i = 0; i < holes.length; i++)\r\n        {\r\n            const hole = holes[i];\r\n\r\n            holeArray.push(points.length / 2);\r\n            points = points.concat(hole.points);\r\n        }\r\n\r\n        // TODO: reduce size later?\r\n        const pn = tempArr;\r\n\r\n        if (pn.length < points.length)\r\n        {\r\n            pn.length = points.length;\r\n        }\r\n        const start = 0;\r\n\r\n        for (let i = 0; i <= holeArray.length; i++)\r\n        {\r\n            let finish = len / 2;\r\n\r\n            if (i > 0)\r\n            {\r\n                if (i < holeArray.length)\r\n                {\r\n                    finish = holeArray[i];\r\n                }\r\n                else\r\n                {\r\n                    finish = (points.length >> 1);\r\n                }\r\n            }\r\n            pn[start * 2] = finish - 1;\r\n            pn[(finish - 1) * 2 + 1] = 0;\r\n            for (let j = start; j + 1 < finish; j++)\r\n            {\r\n                pn[j * 2 + 1] = j + 1;\r\n                pn[j * 2 + 2] = j;\r\n            }\r\n        }\r\n\r\n        // sort color\r\n        graphicsData.triangles = earcut(points, holeArray, 2);\r\n\r\n        if (!graphicsData.triangles)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (!graphicsData.fillAA)\r\n        {\r\n            for (let i = 0; i < points.length; i += 2)\r\n            {\r\n                verts.push(points[i], points[i + 1]);\r\n                joints.push(JOINT_TYPE.FILL);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        const { triangles } = graphicsData;\r\n\r\n        len = points.length;\r\n\r\n        for (let i = 0; i < triangles.length; i += 3)\r\n        {\r\n            // TODO: holes prev/next!!!\r\n            let flag = 0;\r\n\r\n            for (let j = 0; j < 3; j++)\r\n            {\r\n                const ind1 = triangles[i + j];\r\n                const ind2 = triangles[i + (j + 1) % 3];\r\n\r\n                if (pn[ind1 * 2] === ind2 || pn[ind1 * 2 + 1] === ind2)\r\n                {\r\n                    flag |= (1 << j);\r\n                }\r\n            }\r\n            joints.push(JOINT_TYPE.FILL_EXPAND + flag);\r\n            joints.push(JOINT_TYPE.NONE);\r\n            joints.push(JOINT_TYPE.NONE);\r\n            joints.push(JOINT_TYPE.NONE);\r\n            joints.push(JOINT_TYPE.NONE);\r\n            joints.push(JOINT_TYPE.NONE);\r\n        }\r\n\r\n        // bisect, re-using pn\r\n        for (let ind = 0; ind < len / 2; ind++)\r\n        {\r\n            const prev = pn[ind * 2];\r\n            const next = pn[ind * 2 + 1];\r\n            let nx1 = (points[next * 2 + 1] - points[ind * 2 + 1]); let\r\n                ny1 = -(points[next * 2] - points[ind * 2]);\r\n            let nx2 = (points[ind * 2 + 1] - points[prev * 2 + 1]); let\r\n                ny2 = -(points[ind * 2] - points[prev * 2]);\r\n            const D1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);\r\n\r\n            nx1 /= D1;\r\n            ny1 /= D1;\r\n            const D2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\r\n\r\n            nx2 /= D2;\r\n            ny2 /= D2;\r\n\r\n            let bx = (nx1 + nx2);\r\n            let by = (ny1 + ny2);\r\n            const D = bx * nx1 + by * ny1;\r\n\r\n            if (Math.abs(D) < eps)\r\n            {\r\n                bx = nx1;\r\n                by = ny1;\r\n            }\r\n            else\r\n            {\r\n                bx /= D;\r\n                by /= D;\r\n            }\r\n            pn[ind * 2] = bx;\r\n            pn[ind * 2 + 1] = by;\r\n        }\r\n\r\n        for (let i = 0; i < triangles.length; i += 3)\r\n        {\r\n            const prev = triangles[i];\r\n            const ind = triangles[i + 1];\r\n            const next = triangles[i + 2];\r\n            const nx1 = (points[next * 2 + 1] - points[ind * 2 + 1]); const\r\n                ny1 = -(points[next * 2] - points[ind * 2]);\r\n            const nx2 = (points[ind * 2 + 1] - points[prev * 2 + 1]); const\r\n                ny2 = -(points[ind * 2] - points[prev * 2]);\r\n\r\n            let j1 = 1;\r\n\r\n            if (nx1 * ny2 - nx2 * ny1 > 0.0)\r\n            {\r\n                j1 = 2;\r\n            }\r\n\r\n            for (let j = 0; j < 3; j++)\r\n            {\r\n                const ind = triangles[i + (j * j1) % 3];\r\n\r\n                verts.push(points[ind * 2], points[ind * 2 + 1]);\r\n            }\r\n            for (let j = 0; j < 3; j++)\r\n            {\r\n                const ind = triangles[i + (j * j1) % 3];\r\n\r\n                verts.push(pn[ind * 2], pn[ind * 2 + 1]);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["verts"],"mappings":";kkOAuPA,uBAEA,gCAGAA,uBAEA,oDAMAA,8BACAA,gCACAA,gCACAA,gCACAA,8BACAA,gCACAA,gCACAA,gCACAA,8BACAA,gCACAA,gCACAA,gCACAA,iCACAA,mCACAA,mCACAA,qCACAA,kCACAA,oCAEAA,6jGChRA,mCAOA,w6BCPA"}